/*
* {{ properCase name }} Controller
*
* This contains default {{ properCase name }} controller.
*/


import {{ properCase name }} from './model';
import cuid from 'cuid';
import slug from 'limax';
import sanitizeHtml from 'sanitize-html';

/**
* Get all {{name}}s
* @param req
* @param res
* @returns void
*/

export async function get{{ properCase name }} (req, res) {
    try {
        res.status(200)
            .json(await {{properCase name}}
             .find({})
             .sort('-dateAdded')
             .lean()
             .exec());
    } catch (e) {
        res.status(500).send(e);
    }
}

/**
* Save a {{name}}
* @param req
* @param res
* @returns void
*/
export async function add{{ properCase name}}(req, res) {
try {
    // console.log('req.body', req.body);
    // Save model data for Sanitization
    const sanitized{{ properCase name }} = new {{ properCase name }}(req.body);

    // Let's sanitize inputs
    sanitized{{ properCase name }}.item = sanitizeHtml(sanitized{{ properCase name }}.item);
    sanitized{{ properCase name }}.info = sanitizeHtml(sanitized{{ properCase name }}.info);
    sanitized{{ properCase name }}.created_by = sanitizeHtml(sanitized{{ properCase name }}.created_by);
    sanitized{{ properCase name }}.created_at = sanitizeHtml(sanitized{{ properCase name }}.created_at);

    // Add slug data for specific field
    sanitized{{ properCase name }}.slug = slug(sanitized{{ properCase name }}.item.toLowerCase(), {
        lowercase: true,
    });
    // Add cuid for the model
    sanitized{{ properCase name }}.cuid = cuid();

    // Make asynchronous call to save the model to Database

    const {{ name }} = await {{ properCase name }}.create(sanitized{{ properCase name }});
    res.status(201)
        .json({{ name }}.toJSON());
    } catch (e) {
    // if (!req.body.food.item || !req.body.food.info || !req.body.food.cost) {
    // res.status(403).end();
    // }
    console.log(e);
    res.status(500).send(e);
    }
}

/**
* Get a single {{name}} By Id
* @param req
* @param res
* @returns void
*/
export async function get{{ properCase name }}ById(req, res) {
    try {
        res.status(200)
            .json(await {{ properCase name }}
            .findOne({ cuid: req.params.id })
            // .findById(req.params.id)
            .lean()
            .exec()
        );
    } catch (e) {
    res.status(500).send(e);
    }
}

/**
* Delete a {{name}}
* @param req
* @param res
* @returns void
*/
export async function delete{{ properCase name }}(req, res) {
    try {
        res.json(200)
            .json(await {{ properCase name }}
            .findOne({ cuid: req.params.cuid })
            .lean()
            .exec()
    ).remove(() => {
        res.status(200).end();
    });
    } catch (e) {
        console.log(e);
        res.status(500).send(e);
    }
}